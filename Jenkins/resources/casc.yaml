jenkins:
  securityRealm:
    local:
      allowsSignup: false
      users:
       - id: ${JENKINS_ADMIN_ID}
         password: ${JENKINS_ADMIN_PASSWORD}
  authorizationStrategy:
    globalMatrix:
      permissions:
        - "Overall/Administer:authenticated"
        - "Overall/Read:anonymous"
  remotingSecurity:
    enabled: true
security:
  queueItemAuthenticator:
    authenticators:
    - global:
        strategy: triggeringUsersAuthorizationStrategy
credentials:
  system:
    domainCredentials:
      - credentials:
        - usernamePassword:
            scope: GLOBAL
            id: "nexus"
            username: "admin"
            password: "admin"
            description: "Nexus credentials for connecting to Nexus docker registry"
        - usernamePassword:
            scope: GLOBAL
            id: "anchore"
            username: "admin"
            password: "foobar"
            description: "Anchore Engine credentials"
unclassified:
  location:
    url: http://127.0.0.1:8080/
  globalNexusConfiguration:
    nxrmConfigs:
    - nxrm3Configuration:
        displayName: "nexus"
        id: "234325"
        internalId: "nexus"
        serverUrl: "http://127.0.0.1:8228/"
jobs:
  - script: >
      folder('Docker')
  - script: >
      pipelineJob('Docker/Anchore-analyze') {
        parameters {
          choiceParam('DOCKER_IMAGE', ['flask', 'httpd', 'webGoat'], 'Choose which Docker image will be built and scanned.')
        }
        properties {
          githubProjectUrl('https://github.com/UZabauski/Dockerfiles-templates.git')
        }
        definition {
          cps {
            script("""\
              pipeline {
                agent any
                environment {
                  registryCredentials = 'nexus'
                  registry = 'http://localhost:8082/'
                  dockerImage = ''
                }
                stages {
                  stage ('Downloading Docker images') {
                    steps {
                      git 'https://github.com/UZabauski/Dockerfiles-templates.git'
                    }
                  }
                  stage ('Building the required Docker image') {
                    steps {
                      script {
                        dir("IncorrectDockerfiles/${env.DOCKER_IMAGE}/") {
                          dockerImage = docker.build("${env.DOCKER_IMAGE}:v${env.BUILD_ID}")
                        }
                      }
                    }
                  }
                  stage ('Pushing Docker image to the Nexus') {
                    steps {
                      script {
                        docker.withRegistry( registry, registryCredentials ) {
                          dockerImage.push()
                        }
                      }
                    }
                  }
                  stage ('Analyzing Docker image with Anchore') {
                    steps {
                      writeFile file: 'anchore_images', text: "172.16.238.3:8083/${env.DOCKER_IMAGE}:v${env.BUILD_ID}"
                      anchore name: 'anchore_images', engineCredentialsId: 'anchore'
                    }
                  }
                }
              }""".stripIndent())
            sandbox(true)
          }
        }
      }